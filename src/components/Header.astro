---
import ThemeToggle from "@components/ThemeToggle.astro";
const navItems = [
  // { name: "Home", url: "#home", label: "home" },
  { name: "Experience", url: "#experience", label: "experience" },
  { name: "Projects", url: "#projects", label: "projects" },
  { name: "About", url: "#about", label: "about" },
  { name: "Contact", url: "#contact", label: "contact" },
];
---

<header
  class="flex justify-center items-center mx-auto my-2 rounded-2xl py-2 px-6 w-full md:max-w-7xl md:justify-between fixed top-0 left-1/2 -translate-x-1/2 z-50"
>
  <a href="#home" class="text-2xl font-title text-secondary hidden md:block">
    <span class="text-xl text-textPrimary">&lt;</span>ROMZ<span
      class="text-xl text-textPrimary">&gt;</span
    >
  </a>
  <nav
    class="flex items-center gap-[7vw] md:gap-[4vw] text-[14px] md:text-base font-bold"
  >
    {
      navItems.map((item) => (
        <a
          class="relative after:content-[''] after:absolute after:left-0 after:bottom-[-4px] after:w-full after:h-[4px] after:bg-secondary after:rounded-full after:scale-x-0 after:transition-transform after:duration-300 hover:after:scale-x-100 hover:after:origin-center"
          aria-label={item.label}
          href={item.url}
        >
          {item.name}
        </a>
      ))
    }
  </nav>
  <div class="flex items-center gap-6 ml-4 md:ml-0">
    <a
      href="#"
      class="transition duration-300 px-2.5 py-2 rounded-lg border hover:bg-primary font-bold hidden md:block"
      >Contact Me</a
    >
    <ThemeToggle />
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("after:scale-x-100");
            } else {
              item.classList.remove("after:scale-x-100");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  @reference './../styles/global.css';

  header {
    animation: header-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  header {
    @apply bg-header;
  }

  @keyframes header-shadown {
    0% {
      background-color: transparent;
      backdrop-filter: blur(0);
      box-shadow: none;
    }
    100% {
      box-shadow:
        0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1),
        0 0 0 1px rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
    }
  }
</style>
